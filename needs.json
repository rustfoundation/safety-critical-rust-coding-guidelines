{"created": "2025-07-23T21:02:49.976261", "current_version": "", "project": "Safety-Critical Rust Coding Guidelines", "versions": {"": {"created": "2025-07-23T21:02:49.976250", "creator": {"program": "sphinx_needs", "version": "5.1.0"}, "needs": {"compl_ex_4VFyucETB7C3": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "(example of the same simple expansion using a declarative macro)\n\n.. code-block:: rust\n\n  // TODO", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_4VFyucETB7C3", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 83, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_66FSqzD55VRZ", "parent_needs": ["gui_66FSqzD55VRZ"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_AEKEOYhBWPMl": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_AEKEOYhBWPMl", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 207, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_WJlWqgIxmE8P", "parent_needs": ["gui_WJlWqgIxmE8P"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_GLP05s9c1g8N": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_GLP05s9c1g8N", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 333, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_8hs33nyp0ipX", "parent_needs": ["gui_8hs33nyp0ipX"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_Mg8ePOgbGJeW": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_Mg8ePOgbGJeW", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 377, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_13XWp3mb0g2P", "parent_needs": ["gui_13XWp3mb0g2P"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_Pw7YCh4Iv47Z": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_Pw7YCh4Iv47Z", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 39, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_h0uG1C9ZjryA", "parent_needs": ["gui_h0uG1C9ZjryA"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_W08ckDrkOhkt": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "We specify the concrete target types for our pointer casts resulting in a compilation error if the function signature of ``with_base`` is changed.\n\n.. code-block:: rust\n\n   #[repr(C)]\n   struct Base {\n      position: (u32, u32)\n   }\n\n   #[repr(C)]\n   struct Extended {\n      base: Base,\n      scale: f32\n   }\n\n   fn non_compliant_example(extended: &Extended) {\n      let extended = extended as *const Extended;\n      with_base(unsafe { &*(extended as *const Base) })\n   }\n\n   fn with_base(_: &Base) { ... }", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_W08ckDrkOhkt", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 59, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_HDnAZ7EZ4z6G", "parent_needs": ["gui_HDnAZ7EZ4z6G"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_WTe7GoPu5Ez0": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": " .. code-block:: rust\n\n   fn calculate_next_position(current: u32, velocity: u32) -> u32 {\n       // Explicitly handle potential overflow with checked addition\n       current.checked_add(velocity).expect(\"Position calculation overflowed\")\n   }", "created_at": "", "decidability": "", "docname": "coding-guidelines/types-and-traits", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_WTe7GoPu5Ez0", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 55, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_xztNdXA2oFNB", "parent_needs": ["gui_xztNdXA2oFNB"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Types and Traits", "sections": ["Types and Traits"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_cFPg6y7upNdl": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_cFPg6y7upNdl", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 291, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_uuDOArzyO3Qw", "parent_needs": ["gui_uuDOArzyO3Qw"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_iPTgzrvO7qr3": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The same functionality, implemented as a function with explicit borrowing:\n\n.. code-block:: rust\n\n  fn increment_and_double(x: &mut i32) -> i32 {\n      *x += 1; // mutation is explicit\n      *x * 2\n  }\n  let mut num = 5;\n  let result = increment_and_double(&mut num);\n  println!(\"Result: {}, Num: {}\", result, num);\n  // Result: 12, Num: 6\n\nThe function version makes the mutation and borrowing explicit in its signature, improving readability, safety, and debuggability.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_iPTgzrvO7qr3", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 156, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_2jjWUoF1teOY", "parent_needs": ["gui_2jjWUoF1teOY"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_oBoluiKSvREu": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "This compliant solution uses a struct to provide storage for both the pointer and the flag value.\nThis solution is portable to machines of different word sizes, both smaller and larger than 32 bits,\nworking even when pointers cannot be represented in any integer type.\n\n.. code-block:: rust\n\n  struct PtrFlag {\n    pointer: * const u32,\n    flag: u32\n  }\n\n  fn f2(flag: u32, ptr: * const u32) {\n    let ptrflag = PtrFlag {\n      pointer: ptr,\n      flag: flag\n    };\n    /* ... */\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_oBoluiKSvREu", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 310, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_iv9yCMHRgpE0", "parent_needs": ["gui_iv9yCMHRgpE0"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_oneKuF52yzrx": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "There is no compliant example of this operation.", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_oneKuF52yzrx", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 265, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_PM8Vpf7lZ51U", "parent_needs": ["gui_PM8Vpf7lZ51U"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_pO5gP1aj2v4F": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_pO5gP1aj2v4F", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 419, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_FRLaMIMb4t3S", "parent_needs": ["gui_FRLaMIMb4t3S"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_ti7GWHCOhUvT": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_ti7GWHCOhUvT", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 249, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_a1mHfjgKk4Xr", "parent_needs": ["gui_a1mHfjgKk4Xr"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_uilHTIOgxD37": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Valid conversions that are guaranteed to preserve exact values can be communicated\nbetter with ``into()`` or ``from()``.\nValid conversions that risk losing value, where doing so would be an error, can\ncommunicate this and include an error check, with ``try_into`` or ``try_from``.\nOther forms of conversion may find ``transmute`` better communicates their intent.\n\n.. code-block:: rust\n\n   fn f2(x: u16, y: i32, z: u64, w: u8) {\n     let a: char            = w.into();\n     let b: Result <u32, _> = y.try_into(); // produce an error on range clip\n     let c: i64             = x.into();\n\n     let d = f32::from(x);  // u16 is within range, u32 is not\n     let e = f64::from(d);\n     // let f = f32::from(e); // no From exists\n\n     // let g = ...            // no From exists\n\n     let h: u32 = 0;\n     let p1: * const u32 = &h;\n     let a1 = p1 as usize;     // (compliant)\n\n     unsafe {\n       let a2: usize = std::mem::transmute(p1);  // OK\n       let a3: u64   = std::mem::transmute(p1);  // OK, size is checked\n       // let a3: u16   = std::mem::transmute(p1);  // invalid, different sizes\n\n       let p2: * const u32 = std::mem::transmute(a1); // OK\n       let p3: * const u32 = std::mem::transmute(a1); // OK\n     }\n\n     unsafe {\n       // does something entirely different,\n       // reinterpreting the bits of z as the IEEE bit pattern of a double\n       // precision object, rather than converting the integer value\n       let f1: f64 = std::mem::transmute(z);\n     }\n   }", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_uilHTIOgxD37", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 159, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_ADHABsmK9FXz", "parent_needs": ["gui_ADHABsmK9FXz"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "compl_ex_xyaShvxL9JAM": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The following is a macro refers to Vec using a global path. Even if there is a different struct called\n`Vec` defined in the scope of the macro usage, this macro will unambigiously use the `Vec` from the\nStandard Library.\n\n.. code-block:: rust\n\n  #[macro_export]\n  macro_rules! vec {\n      ( $( $x:expr ),* ) => {\n          {\n              let mut temp_vec = ::std::vec::Vec::new(); // global path\n              $(\n                  temp_vec.push($x);\n              )*\n              temp_vec\n          }\n      };\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "compl_ex_xyaShvxL9JAM", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 477, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_SJMrWDYZ0dN4", "parent_needs": ["gui_SJMrWDYZ0dN4"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "compliant_example", "type_name": "Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_13XWp3mb0g2P": {"arch": {}, "avatar": "", "category": "required", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Attribute macros shall neither be declared nor invoked.\nPrefer less powerful macros that only extend source code.\n\n.. rationale::\n   :id: rat_X8uCF5yx7Mpo\n   :status: draft\n\n   Attribute macros are able to rewrite items entirely or in other unexpected ways which can cause confusion and introduce errors.\n\n.. non_compliant_example::\n   :id: non_compl_ex_eW374waRPbeL\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     #[tokio::main]  // non-compliant\n     async fn main() {\n\n     }\n\n.. compliant_example::\n   :id: compl_ex_Mg8ePOgbGJeW\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Compliant implementation\n     }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_4vjbkm4ceymk", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_13XWp3mb0g2P", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 345, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_X8uCF5yx7Mpo", "non_compl_ex_eW374waRPbeL", "compl_ex_Mg8ePOgbGJeW"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "system", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Attribute macros shall not be used", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_2jjWUoF1teOY": {"arch": {}, "avatar": "", "category": "mandatory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Functions should always be preferred over macros, except when macros provide essential functionality that functions cannot, such as variadic interfaces, compile-time code generation, or syntax extensions via custom derive and attribute macros.\n\n|\n\n.. rationale::\n   :id: rat_M9bp23ctkzQ7\n   :status: draft\n\n   Although the compiler reports both the macro expansion and its invocation site, diagnostics originating within macros can be more difficult to interpret than those from ordinary function or type definitions. Complex or deeply nested macros may obscure intent and hinder static analysis, increasing the risk of misinterpretation or overlooked errors during code review.\n\n\n   **Debugging Complexity**\n\n   - Errors point to expanded code rather than source locations, making it difficult to trace compile-time errors back to the original macro invocation.\n\n   **Optimization**\n\n   - Macros may inhibit compiler optimizations that work better with functions.\n   - Macros act like ``#[inline(always)]`` functions, which can lead to code bloat.\n   - They don't benefit from the compiler's inlining heuristics, missing out on selective inlining where the compiler decides when inlining is beneficial.\n\n   **Functions provide**\n\n   - Clear type signatures.\n   - Predictable behavior.\n   - Proper stack traces.\n   - Consistent optimization opportunities.\n\n\n.. non_compliant_example::\n   :id: non_compl_ex_TZgk2vG42t2r\n   :status: draft\n\n   Using a macro where a simple function would suffice, leads to hidden mutation:\n\n   .. code-block:: rust\n\n     macro_rules! increment_and_double {\n         ($x:expr) => {\n             {\n                 $x += 1; // mutation is implicit\n                 $x * 2\n             }\n         };\n     }\n     let mut num = 5;\n     let result = increment_and_double!(num);\n     println!(\"Result: {}, Num: {}\", result, num);\n     // Result: 12, Num: 6\n\n   In this example, calling the macro both increments and returns the value in one go\u2014without any clear indication in its \u201csignature\u201d that it mutates its argument. As a result, num is changed behind the scenes, which can surprise readers and make debugging more difficult.\n\n\n.. compliant_example::\n   :id: compl_ex_iPTgzrvO7qr3\n   :status: draft\n\n   The same functionality, implemented as a function with explicit borrowing:\n\n   .. code-block:: rust\n\n     fn increment_and_double(x: &mut i32) -> i32 {\n         *x += 1; // mutation is explicit\n         *x * 2\n     }\n     let mut num = 5;\n     let result = increment_and_double(&mut num);\n     println!(\"Result: {}, Num: {}\", result, num);\n     // Result: 12, Num: 6\n\n   The function version makes the mutation and borrowing explicit in its signature, improving readability, safety, and debuggability.", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_xa7lp0zg1ol2", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_2jjWUoF1teOY", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 93, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_M9bp23ctkzQ7", "non_compl_ex_TZgk2vG42t2r", "compl_ex_iPTgzrvO7qr3"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "system", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "A macro should not be used in place of a function", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_66FSqzD55VRZ": {"arch": {}, "avatar": "", "category": "advisory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Macros should be expressed using declarative syntax\nin preference to procedural syntax.\n\n.. rationale::\n   :id: rat_AmCavSymv3Ev\n   :status: draft\n\n   Procedural macros are not restricted to pure transcription and can contain arbitrary Rust code.\n   This means they can be harder to understand, and cannot be as easily proved to work as intended.\n   Procedural macros can have arbitrary side effects, which can exhaust compiler resources or\n   expose a vulnerability for users of adopted code.\n\n.. non_compliant_example::\n   :id: non_compl_ex_pJhVZW6a1HP9\n   :status: draft\n\n   (example of a simple expansion using a proc-macro)\n\n   .. code-block:: rust\n\n     // TODO\n\n.. compliant_example::\n   :id: compl_ex_4VFyucETB7C3\n   :status: draft\n\n   (example of the same simple expansion using a declarative macro)\n\n   .. code-block:: rust\n\n     // TODO", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_wn1i6hzg2ff7", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_66FSqzD55VRZ", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 51, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_AmCavSymv3Ev", "non_compl_ex_pJhVZW6a1HP9", "compl_ex_4VFyucETB7C3"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "1.85.0;1.85.1", "scope": "crate", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["readability", "reduce-human-error"], "template": null, "title": "Procedural macros should not be used", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_8hs33nyp0ipX": {"arch": {}, "avatar": "", "category": "mandatory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Description of the guideline goes here.\n\n.. rationale::\n   :id: rat_e9iS187skbHH\n   :status: draft\n\n   Explanation of why this guideline is important.\n\n.. non_compliant_example::\n   :id: non_compl_ex_lRt4LBen6Lkc\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Non-compliant implementation\n     }\n\n.. compliant_example::\n   :id: compl_ex_GLP05s9c1g8N\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Compliant implementation\n     }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_xlfo7di0gsqz", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_8hs33nyp0ipX", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 303, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_e9iS187skbHH", "non_compl_ex_lRt4LBen6Lkc", "compl_ex_GLP05s9c1g8N"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "system", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Shall ensure complete hygiene of macros", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_ADHABsmK9FXz": {"arch": {}, "avatar": "", "category": "advisory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The binary operator ``as`` should not be used with:\n\n* a numeric type, including all supported integer, floating, and machine-dependent arithmetic types; or\n* ``bool``; or\n* ``char``\n\nas either the right operand or the type of the left operand.\n\n**Exception:** ``as`` may be used with ``usize`` as the right operand and an expression of raw pointer\ntype as the left operand.\n\n.. rationale::\n   :id: rat_v56bjjcveLxQ\n   :status: draft\n\n   Although the conversions performed by ``as`` between numeric types are all well-defined, ``as`` coerces\n   the value to fit in the destination type, which may result in unexpected data loss if the value needs to\n   be truncated, rounded, or produce a nearest possible non-equal value.\n\n   Although some conversions are lossless, others are not symmetrical. Instead of relying on either a defined\n   lossy behaviour or risking loss of precision, the code can communicate intent by using ``Into`` or ``From``\n   and ``TryInto`` or ``TryFrom`` to signal which conversions are intended to perfectly preserve the original\n   value, and which are intended to be fallible. The latter cannot be used from const functions, indicating\n   that these should avoid using fallible conversions.\n\n   A pointer-to-address cast does not lose value, but will be truncated unless the destination type is large\n   enough to hold the address value. The ``usize`` type is guaranteed to be wide enough for this purpose.\n\n   A pointer-to-address cast is not symmetrical because the resulting pointer may not point to a valid object,\n   may not point to an object of the right type, or may not be properly aligned.\n   If a conversion in this direction is needed, :std:`std::mem::transmute` will communicate the intent to perform\n   an unsafe operation.\n\n.. non_compliant_example::\n   :id: non_compl_ex_hzGUYoMnK59w\n   :status: draft\n\n   ``as`` used here can change the value range or lose precision.\n   Even when it doesn't, nothing enforces the correct behaviour or communicates whether\n   we intend to allow lossy conversions, or only expect valid conversions.\n\n   .. code-block:: rust\n\n      fn f1(x: u16, y: i32, z: u64, w: u8) {\n        let a = w as char;           // non-compliant\n        let b = y as u32;            // non-compliant - changes value range, converting negative values\n        let c = x as i64;            // non-compliant - could use .into()\n\n        let d = y as f32;            // non-compliant - lossy\n        let e = d as f64;            // non-compliant - could use .into()\n        let f = e as f32;            // non-compliant - lossy\n\n        let g = e as i64;            // non-compliant - lossy despite object size\n\n        let p1: * const u32 = &b;\n        let a1 = p1 as usize;        // compliant by exception\n        let a2 = p1 as u16;          // non-compliant - may lose address range\n        let a3 = p1 as u64;          // non-compliant - use usize to indicate intent\n\n        let p2 = a1 as * const u32;  // non-compliant - prefer transmute\n        let p3 = a2 as * const u32;  // non-compliant (and most likely not in a valid address range)\n      }\n\n.. compliant_example::\n   :id: compl_ex_uilHTIOgxD37\n   :status: draft\n\n   Valid conversions that are guaranteed to preserve exact values can be communicated\n   better with ``into()`` or ``from()``.\n   Valid conversions that risk losing value, where doing so would be an error, can\n   communicate this and include an error check, with ``try_into`` or ``try_from``.\n   Other forms of conversion may find ``transmute`` better communicates their intent.\n\n   .. code-block:: rust\n\n      fn f2(x: u16, y: i32, z: u64, w: u8) {\n        let a: char            = w.into();\n        let b: Result <u32, _> = y.try_into(); // produce an error on range clip\n        let c: i64             = x.into();\n\n        let d = f32::from(x);  // u16 is within range, u32 is not\n        let e = f64::from(d);\n        // let f = f32::from(e); // no From exists\n\n        // let g = ...            // no From exists\n\n        let h: u32 = 0;\n        let p1: * const u32 = &h;\n        let a1 = p1 as usize;     // (compliant)\n\n        unsafe {\n          let a2: usize = std::mem::transmute(p1);  // OK\n          let a3: u64   = std::mem::transmute(p1);  // OK, size is checked\n          // let a3: u16   = std::mem::transmute(p1);  // invalid, different sizes\n\n          let p2: * const u32 = std::mem::transmute(a1); // OK\n          let p3: * const u32 = std::mem::transmute(a1); // OK\n        }\n\n        unsafe {\n          // does something entirely different,\n          // reinterpreting the bits of z as the IEEE bit pattern of a double\n          // precision object, rather than converting the integer value\n          let f1: f64 = std::mem::transmute(z);\n        }\n      }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_otaxe9okhdr1", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_ADHABsmK9FXz", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 86, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_v56bjjcveLxQ", "non_compl_ex_hzGUYoMnK59w", "compl_ex_uilHTIOgxD37"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "<TODO>", "scope": "module", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["subset", "reduce-human-error"], "template": null, "title": "The 'as' operator should not be used with numeric operands", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_FRLaMIMb4t3S": {"arch": {}, "avatar": "", "category": "required", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Description of the guideline goes here.\n\n.. rationale::\n   :id: rat_WJubG7KuUDLW\n   :status: draft\n\n   Explanation of why this guideline is important.\n\n.. non_compliant_example::\n   :id: non_compl_ex_AyFnP0lJLHxi\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Non-compliant implementation\n     }\n\n.. compliant_example::\n   :id: compl_ex_pO5gP1aj2v4F\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Compliant implementation\n     }", "created_at": "", "decidability": "todo", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_4vjbkm4ceymk", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_FRLaMIMb4t3S", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 389, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_WJubG7KuUDLW", "non_compl_ex_AyFnP0lJLHxi", "compl_ex_pO5gP1aj2v4F"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "todo", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Do not hide unsafe blocks within macro expansions", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_HDnAZ7EZ4z6G": {"arch": {}, "avatar": "", "category": "required", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Code must not rely on Rust's type inference when doing explicit pointer casts via ``var as Type`` or :std:`core::mem::transmute`.\nInstead, explicitly specify the complete target type in the ``as`` expression or :std:`core::mem::transmute` call expression.\n\n.. rationale::\n   :id: rat_h8LdJQ1MNKu9\n   :status: draft\n\n   ``var as Type`` casts and :std:`core::mem::transmute`\\s between raw pointer types are generally valid and unchecked by the compiler as long the target pointer type is a thin pointer.\n   Not specifying the concrete target pointer type allows the compiler to infer it from the surroundings context which may result in the cast accidentally changing due to surrounding type changes resulting in semantically invalid pointer casts.\n\n   Raw pointers have a variety of invariants to manually keep track of.\n   Specifying the concrete types in these scenarios allows the compiler to catch some of these potential issues for the user.\n\n.. non_compliant_example::\n   :id: non_compl_ex_V37Pl103aUW4\n   :status: draft\n\n   The following code leaves it up to type inference to figure out the concrete types of the raw pointer casts, allowing changes to ``with_base``'s function signature to affect the types the function body of ``non_compliant_example`` without incurring a compiler error.\n\n   .. code-block:: rust\n\n      #[repr(C)]\n      struct Base {\n         position: (u32, u32)\n      }\n\n      #[repr(C)]\n      struct Extended {\n         base: Base,\n         scale: f32\n      }\n\n      fn non_compliant_example(extended: &Extended) {\n         let extended = extended as *const _;\n         with_base(unsafe { &*(extended as *const _) })\n      }\n\n      fn with_base(_: &Base) { ... }\n\n.. compliant_example::\n   :id: compl_ex_W08ckDrkOhkt\n   :status: draft\n\n   We specify the concrete target types for our pointer casts resulting in a compilation error if the function signature of ``with_base`` is changed.\n\n   .. code-block:: rust\n\n      #[repr(C)]\n      struct Base {\n         position: (u32, u32)\n      }\n\n      #[repr(C)]\n      struct Extended {\n         base: Base,\n         scale: f32\n      }\n\n      fn non_compliant_example(extended: &Extended) {\n         let extended = extended as *const Extended;\n         with_base(unsafe { &*(extended as *const Base) })\n      }\n\n      fn with_base(_: &Base) { ... }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_1qhsun1vyarz", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_HDnAZ7EZ4z6G", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 10, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_h8LdJQ1MNKu9", "non_compl_ex_V37Pl103aUW4", "compl_ex_W08ckDrkOhkt"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "<TODO>", "scope": "module", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["readability", "reduce-human-error"], "template": null, "title": "Avoid as underscore pointer casts", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_PM8Vpf7lZ51U": {"arch": {}, "avatar": "", "category": "<TODO>", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The ``as`` operator shall not be used with an expression of numeric type as the left operand,\nand any pointer type as the right operand.\n\n:std:`std::mem::transmute` shall not be used with any numeric type (including floating point types)\nas the argument to the ``Src`` parameter, and any pointer type as the argument to the ``Dst`` parameter.\n\n.. rationale::\n   :id: rat_YqhEiWTj9z6L\n   :status: draft\n\n   A pointer created from an arbitrary arithmetic expression may designate an invalid address,\n   including an address that does not point to a valid object, an address that points to an\n   object of the wrong type, or an address that is not properly aligned. Use of such a pointer\n   to access memory will result in undefined behavior.\n\n   The ``as`` operator also does not check that the size of the source operand is the same as\n   the size of a pointer, which may lead to unexpected results if the address computation was\n   originally performed in a differently-sized address space.\n\n   While ``as`` can notionally be used to create a null pointer, the functions\n   :std:`core::ptr::null` and :std:`core::ptr::null_mut` are the more idiomatic way to do this.\n\n.. non_compliant_example::\n   :id: non_compl_ex_0ydPk7VENSrA\n   :status: draft\n\n   Any use of ``as`` or ``transmute`` to create a pointer from an arithmetic address value\n   is non-compliant:\n\n   .. code-block:: rust\n\n     fn f1(x: u16, y: i32, z: u64, w: usize) {\n       let p1 = x as * const u32;  // not compliant\n       let p2 = y as * const u32;  // not compliant\n       let p3 = z as * const u32;  // not compliant\n       let p4 = w as * const u32;  // not compliant despite being the right size\n\n       let f: f64 = 10.0;\n       // let p5 = f as * const u32;  // not valid\n\n       unsafe {\n         // let p5: * const u32 = std::mem::transmute(x);  // not valid\n         // let p6: * const u32 = std::mem::transmute(y);  // not valid\n\n         let p7: * const u32 = std::mem::transmute(z); // not compliant\n         let p8: * const u32 = std::mem::transmute(w); // not compliant\n\n         let p9: * const u32 = std::mem::transmute(f); // not compliant, and very strange\n       }\n     }\n\n.. compliant_example::\n   :id: compl_ex_oneKuF52yzrx\n   :status: draft\n\n   There is no compliant example of this operation.", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_59mpteeczzo", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_PM8Vpf7lZ51U", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 204, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_YqhEiWTj9z6L", "non_compl_ex_0ydPk7VENSrA", "compl_ex_oneKuF52yzrx"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "<TODO>", "scope": "module", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["subset", "undefined-behavior"], "template": null, "title": "An integer shall not be converted to a pointer", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_SJMrWDYZ0dN4": {"arch": {}, "avatar": "", "category": "required", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Each name inside of the definition of a macro shall either use a global path or path prefixed with $crate.\n\n.. rationale::\n   :id: rat_VRNXaxmW1l2s\n   :status: draft\n\n   Using a path that refers to an entity relatively inside of a macro subjects it to path resolution\n   results which may change depending on where the macro is used. The intended path to refer to an entity\n   can be shadowed when using a macro leading to unexpected behaviors. This could lead to developer confusion\n   about why a macro behaves differently in diffenent locations, or confusion about where entity in a macro\n   will resolve to.\n\n.. non_compliant_example::\n   :id: non_compl_ex_m2XR1ihTbCQS\n   :status: draft\n\n   The following is a macro which shows referring to a vector entity using a non-global path. Depending on\n   where the macro is used a different `Vec` could be used than is intended. If scope where this is used\n   defines a struct `Vec` which is not preset at the macro definition, the macro user might be intending to\n   use that in the macro.\n\n   .. code-block:: rust\n\n     #[macro_export]\n     macro_rules! vec {\n         ( $( $x:expr ),* ) => {\n             {\n                 let mut temp_vec = Vec::new(); // non-global path\n                 $(\n                     temp_vec.push($x);\n                 )*\n                 temp_vec\n             }\n         };\n     }\n\n.. compliant_example::\n   :id: compl_ex_xyaShvxL9JAM\n   :status: draft\n\n   The following is a macro refers to Vec using a global path. Even if there is a different struct called\n   `Vec` defined in the scope of the macro usage, this macro will unambigiously use the `Vec` from the\n   Standard Library.\n\n   .. code-block:: rust\n\n     #[macro_export]\n     macro_rules! vec {\n         ( $( $x:expr ),* ) => {\n             {\n                 let mut temp_vec = ::std::vec::Vec::new(); // global path\n                 $(\n                     temp_vec.push($x);\n                 )*\n                 temp_vec\n             }\n         };\n     }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_7kb6ltajgiou", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_SJMrWDYZ0dN4", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 431, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_VRNXaxmW1l2s", "non_compl_ex_m2XR1ihTbCQS", "compl_ex_xyaShvxL9JAM"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "1.85.0;1.85.1", "scope": "module", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Names in a macro definition shall use a fully qualified path", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_WJlWqgIxmE8P": {"arch": {}, "avatar": "", "category": "mandatory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Description of the guideline goes here.\n\n.. rationale::\n   :id: rat_C8RRidiVzhRj\n   :status: draft\n\n   Explanation of why this guideline is important.\n\n.. non_compliant_example::\n   :id: non_compl_ex_TjRiRkmBY6wG\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Non-compliant implementation\n     }\n\n.. compliant_example::\n   :id: compl_ex_AEKEOYhBWPMl\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Compliant implementation\n     }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_utd3zqczix", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_WJlWqgIxmE8P", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 177, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_C8RRidiVzhRj", "non_compl_ex_TjRiRkmBY6wG", "compl_ex_AEKEOYhBWPMl"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "system", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Shall not use Function-like Macros", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_a1mHfjgKk4Xr": {"arch": {}, "avatar": "", "category": "mandatory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Description of the guideline goes here.\n\n.. rationale::\n   :id: rat_62mSorNF05kD\n   :status: draft\n\n   Explanation of why this guideline is important.\n\n.. non_compliant_example::\n   :id: non_compl_ex_hP5KLhqQfDcd\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Non-compliant implementation\n     }\n\n.. compliant_example::\n   :id: compl_ex_ti7GWHCOhUvT\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Compliant implementation\n     }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_vnvt40pa48n8", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_a1mHfjgKk4Xr", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 219, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_62mSorNF05kD", "non_compl_ex_hP5KLhqQfDcd", "compl_ex_ti7GWHCOhUvT"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "system", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Shall not invoke macros", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_h0uG1C9ZjryA": {"arch": {}, "avatar": "", "category": "mandatory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Description of the guideline goes here.\n\n.. rationale::\n   :id: rat_U3AEUPyaUhcb\n   :status: draft\n\n   Explanation of why this guideline is important.\n\n.. non_compliant_example::\n   :id: non_compl_ex_Gb4zimei8cNI\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Non-compliant implementation\n     }\n\n.. compliant_example::\n   :id: compl_ex_Pw7YCh4Iv47Z\n   :status: draft\n\n   Explanation of code example\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Compliant implementation\n     }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_xa7lp0zg1ol2", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_h0uG1C9ZjryA", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 9, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_U3AEUPyaUhcb", "non_compl_ex_Gb4zimei8cNI", "compl_ex_Pw7YCh4Iv47Z"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "system", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Shall not use Declarative Macros", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_iv9yCMHRgpE0": {"arch": {}, "avatar": "", "category": "<TODO>", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "An expression of numeric type shall not be converted to a pointer if the resulting pointer\nis incorrectly aligned, does not point to an entity of the referenced type, or is an invalid representation.\n\n.. rationale::\n   :id: rat_OhxKm751axKw\n   :status: draft\n\n   The mapping between pointers and integers must be consistent with the addressing structure of the\n   execution environment. Issues may arise, for example, on architectures that have a segmented memory model.\n\n.. non_compliant_example::\n   :id: non_compl_ex_CkytKjRQezfQ\n   :status: draft\n\n   This example makes assumptions about the layout of the address space that do not hold on all platforms.\n   The manipulated address may have discarded part of the original address space, and the flag may\n   silently interfere with the address value. On platforms where pointers are 64-bits this may have\n   particularly unexpected results.\n\n   .. code-block:: rust\n\n     fn f1(flag: u32, ptr: * const u32) {\n       /* ... */\n       let mut rep = ptr as usize;\n       rep = (rep & 0x7fffff) | ((flag as usize) << 23);\n       let p2 = rep as * const u32;\n     }\n\n.. compliant_example::\n   :id: compl_ex_oBoluiKSvREu\n   :status: draft\n\n   This compliant solution uses a struct to provide storage for both the pointer and the flag value.\n   This solution is portable to machines of different word sizes, both smaller and larger than 32 bits,\n   working even when pointers cannot be represented in any integer type.\n\n   .. code-block:: rust\n\n     struct PtrFlag {\n       pointer: * const u32,\n       flag: u32\n     }\n\n     fn f2(flag: u32, ptr: * const u32) {\n       let ptrflag = PtrFlag {\n         pointer: ptr,\n         flag: flag\n       };\n       /* ... */\n     }", "created_at": "", "decidability": "undecidable", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_9wgldua1u8yt", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_iv9yCMHRgpE0", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 272, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_OhxKm751axKw", "non_compl_ex_CkytKjRQezfQ", "compl_ex_oBoluiKSvREu"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "<TODO>", "scope": "system", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["defect", "undefined-behavior"], "template": null, "title": "An integer shall not be converted to an invalid pointer", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_uuDOArzyO3Qw": {"arch": {}, "avatar": "", "category": "mandatory", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Description of the guideline goes here.\n\n.. rationale::\n   :id: rat_dNgSvC0SZ3JJ\n   :status: draft\n\n   Explanation of why this guideline is important.\n\n.. non_compliant_example::\n   :id: non_compl_ex_g9j8shyGM2Rh\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Non-compliant implementation\n     }\n\n.. compliant_example::\n   :id: compl_ex_cFPg6y7upNdl\n   :status: draft\n\n   Explanation of code example.\n\n   .. code-block:: rust\n\n     fn example_function() {\n         // Compliant implementation\n     }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_wjldgtio5o75", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_uuDOArzyO3Qw", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 261, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_dNgSvC0SZ3JJ", "non_compl_ex_g9j8shyGM2Rh", "compl_ex_cFPg6y7upNdl"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "todo", "scope": "system", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["reduce-human-error"], "template": null, "title": "Shall not write code that expands macros", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "gui_xztNdXA2oFNB": {"arch": {}, "avatar": "", "category": "required", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Code must not rely on Rust's implicit integer wrapping behavior that may occur in release\nbuilds. Instead, explicitly handle potential overflows using the standard library's checked,\nsaturating, or wrapping operations.\n\n.. rationale::\n   :id: rat_kYiIiW8R2qD1\n   :status: draft\n\n   In debug builds, Rust performs runtime checks for integer overflow and will panic if detected.\n   However, in release builds (with optimizations enabled), unless the flag `overflow-checks`_ is\n   turned on, integer operations silently wrap around on overflow, creating potential for silent\n   failures and security vulnerabilities. Note that overflow-checks only brings the default panic\n   behavior from debug into release builds, avoiding potential silent wrap arounds. Nonetheless,\n   abrupt program termination is usually not suitable and, therefore, turning this flag on must\n   not be used as a substitute of explicit handling. Furthermore, the behavior in release mode is\n   under consideration by the The Rust Language Design Team and in the future overflow checking\n   may be turned on by default in release builds (it is a `frequently requested change`_).\n\n   .. _overflow-checks: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#overflow-checks\n   .. _frequently requested change: https://lang-team.rust-lang.org/frequently-requested-changes.html#numeric-overflow-checking-should-be-on-by-default-even-in-release-mode\n\n   Safety-critical software requires consistent and predictable behavior across all build\n   configurations. Explicit handling of potential overflow conditions improves code clarity,\n   maintainability, and reduces the risk of numerical errors in production.\n\n.. non_compliant_example::\n   :id: non_compl_ex_PO5TyFsRTlWv\n   :status: draft\n\n    .. code-block:: rust\n\n      fn calculate_next_position(current: u32, velocity: u32) -> u32 {\n          // Potential for silent overflow in release builds\n          current + velocity\n      }\n\n.. compliant_example::\n   :id: compl_ex_WTe7GoPu5Ez0\n   :status: draft\n\n    .. code-block:: rust\n\n      fn calculate_next_position(current: u32, velocity: u32) -> u32 {\n          // Explicitly handle potential overflow with checked addition\n          current.checked_add(velocity).expect(\"Position calculation overflowed\")\n      }", "created_at": "", "decidability": "decidable", "docname": "coding-guidelines/types-and-traits", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "fls_cokwseo3nnr", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "gui_xztNdXA2oFNB", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 9, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "", "parent_needs": [], "parent_needs_back": ["rat_kYiIiW8R2qD1", "non_compl_ex_PO5TyFsRTlWv", "compl_ex_WTe7GoPu5Ez0"], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "1.85.0;1.85.1", "scope": "module", "section_name": "Types and Traits", "sections": ["Types and Traits"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": ["numerics"], "template": null, "title": "Avoid Implicit Integer Wrapping", "type": "guideline", "type_name": "Guideline", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_0ydPk7VENSrA": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Any use of ``as`` or ``transmute`` to create a pointer from an arithmetic address value\nis non-compliant:\n\n.. code-block:: rust\n\n  fn f1(x: u16, y: i32, z: u64, w: usize) {\n    let p1 = x as * const u32;  // not compliant\n    let p2 = y as * const u32;  // not compliant\n    let p3 = z as * const u32;  // not compliant\n    let p4 = w as * const u32;  // not compliant despite being the right size\n\n    let f: f64 = 10.0;\n    // let p5 = f as * const u32;  // not valid\n\n    unsafe {\n      // let p5: * const u32 = std::mem::transmute(x);  // not valid\n      // let p6: * const u32 = std::mem::transmute(y);  // not valid\n\n      let p7: * const u32 = std::mem::transmute(z); // not compliant\n      let p8: * const u32 = std::mem::transmute(w); // not compliant\n\n      let p9: * const u32 = std::mem::transmute(f); // not compliant, and very strange\n    }\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_0ydPk7VENSrA", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 236, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_PM8Vpf7lZ51U", "parent_needs": ["gui_PM8Vpf7lZ51U"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_AyFnP0lJLHxi": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Non-compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_AyFnP0lJLHxi", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 407, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_FRLaMIMb4t3S", "parent_needs": ["gui_FRLaMIMb4t3S"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_CkytKjRQezfQ": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "This example makes assumptions about the layout of the address space that do not hold on all platforms.\nThe manipulated address may have discarded part of the original address space, and the flag may\nsilently interfere with the address value. On platforms where pointers are 64-bits this may have\nparticularly unexpected results.\n\n.. code-block:: rust\n\n  fn f1(flag: u32, ptr: * const u32) {\n    /* ... */\n    let mut rep = ptr as usize;\n    rep = (rep & 0x7fffff) | ((flag as usize) << 23);\n    let p2 = rep as * const u32;\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_CkytKjRQezfQ", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 292, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_iv9yCMHRgpE0", "parent_needs": ["gui_iv9yCMHRgpE0"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_Gb4zimei8cNI": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Non-compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_Gb4zimei8cNI", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 27, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_h0uG1C9ZjryA", "parent_needs": ["gui_h0uG1C9ZjryA"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_PO5TyFsRTlWv": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": " .. code-block:: rust\n\n   fn calculate_next_position(current: u32, velocity: u32) -> u32 {\n       // Potential for silent overflow in release builds\n       current + velocity\n   }", "created_at": "", "decidability": "", "docname": "coding-guidelines/types-and-traits", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_PO5TyFsRTlWv", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 44, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_xztNdXA2oFNB", "parent_needs": ["gui_xztNdXA2oFNB"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Types and Traits", "sections": ["Types and Traits"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_TZgk2vG42t2r": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Using a macro where a simple function would suffice, leads to hidden mutation:\n\n.. code-block:: rust\n\n  macro_rules! increment_and_double {\n      ($x:expr) => {\n          {\n              $x += 1; // mutation is implicit\n              $x * 2\n          }\n      };\n  }\n  let mut num = 5;\n  let result = increment_and_double!(num);\n  println!(\"Result: {}, Num: {}\", result, num);\n  // Result: 12, Num: 6\n\nIn this example, calling the macro both increments and returns the value in one go\u2014without any clear indication in its \u201csignature\u201d that it mutates its argument. As a result, num is changed behind the scenes, which can surprise readers and make debugging more difficult.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_TZgk2vG42t2r", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 132, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_2jjWUoF1teOY", "parent_needs": ["gui_2jjWUoF1teOY"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_TjRiRkmBY6wG": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Non-compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_TjRiRkmBY6wG", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 195, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_WJlWqgIxmE8P", "parent_needs": ["gui_WJlWqgIxmE8P"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_V37Pl103aUW4": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The following code leaves it up to type inference to figure out the concrete types of the raw pointer casts, allowing changes to ``with_base``'s function signature to affect the types the function body of ``non_compliant_example`` without incurring a compiler error.\n\n.. code-block:: rust\n\n   #[repr(C)]\n   struct Base {\n      position: (u32, u32)\n   }\n\n   #[repr(C)]\n   struct Extended {\n      base: Base,\n      scale: f32\n   }\n\n   fn non_compliant_example(extended: &Extended) {\n      let extended = extended as *const _;\n      with_base(unsafe { &*(extended as *const _) })\n   }\n\n   fn with_base(_: &Base) { ... }", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_V37Pl103aUW4", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 33, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_HDnAZ7EZ4z6G", "parent_needs": ["gui_HDnAZ7EZ4z6G"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_eW374waRPbeL": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  #[tokio::main]  // non-compliant\n  async fn main() {\n\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_eW374waRPbeL", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 364, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_13XWp3mb0g2P", "parent_needs": ["gui_13XWp3mb0g2P"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_g9j8shyGM2Rh": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Non-compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_g9j8shyGM2Rh", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 279, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_uuDOArzyO3Qw", "parent_needs": ["gui_uuDOArzyO3Qw"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_hP5KLhqQfDcd": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Non-compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_hP5KLhqQfDcd", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 237, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_a1mHfjgKk4Xr", "parent_needs": ["gui_a1mHfjgKk4Xr"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_hzGUYoMnK59w": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "``as`` used here can change the value range or lose precision.\nEven when it doesn't, nothing enforces the correct behaviour or communicates whether\nwe intend to allow lossy conversions, or only expect valid conversions.\n\n.. code-block:: rust\n\n   fn f1(x: u16, y: i32, z: u64, w: u8) {\n     let a = w as char;           // non-compliant\n     let b = y as u32;            // non-compliant - changes value range, converting negative values\n     let c = x as i64;            // non-compliant - could use .into()\n\n     let d = y as f32;            // non-compliant - lossy\n     let e = d as f64;            // non-compliant - could use .into()\n     let f = e as f32;            // non-compliant - lossy\n\n     let g = e as i64;            // non-compliant - lossy despite object size\n\n     let p1: * const u32 = &b;\n     let a1 = p1 as usize;        // compliant by exception\n     let a2 = p1 as u16;          // non-compliant - may lose address range\n     let a3 = p1 as u64;          // non-compliant - use usize to indicate intent\n\n     let p2 = a1 as * const u32;  // non-compliant - prefer transmute\n     let p3 = a2 as * const u32;  // non-compliant (and most likely not in a valid address range)\n   }", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_hzGUYoMnK59w", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 129, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_ADHABsmK9FXz", "parent_needs": ["gui_ADHABsmK9FXz"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_lRt4LBen6Lkc": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of code example.\n\n.. code-block:: rust\n\n  fn example_function() {\n      // Non-compliant implementation\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_lRt4LBen6Lkc", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 321, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_8hs33nyp0ipX", "parent_needs": ["gui_8hs33nyp0ipX"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_m2XR1ihTbCQS": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The following is a macro which shows referring to a vector entity using a non-global path. Depending on\nwhere the macro is used a different `Vec` could be used than is intended. If scope where this is used\ndefines a struct `Vec` which is not preset at the macro definition, the macro user might be intending to\nuse that in the macro.\n\n.. code-block:: rust\n\n  #[macro_export]\n  macro_rules! vec {\n      ( $( $x:expr ),* ) => {\n          {\n              let mut temp_vec = Vec::new(); // non-global path\n              $(\n                  temp_vec.push($x);\n              )*\n              temp_vec\n          }\n      };\n  }", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_m2XR1ihTbCQS", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 453, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_SJMrWDYZ0dN4", "parent_needs": ["gui_SJMrWDYZ0dN4"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "non_compl_ex_pJhVZW6a1HP9": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "(example of a simple expansion using a proc-macro)\n\n.. code-block:: rust\n\n  // TODO", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "non_compl_ex_pJhVZW6a1HP9", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 73, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_66FSqzD55VRZ", "parent_needs": ["gui_66FSqzD55VRZ"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "non_compliant_example", "type_name": "Non-Compliant Example", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_62mSorNF05kD": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of why this guideline is important.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_62mSorNF05kD", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 231, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_a1mHfjgKk4Xr", "parent_needs": ["gui_a1mHfjgKk4Xr"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_AmCavSymv3Ev": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Procedural macros are not restricted to pure transcription and can contain arbitrary Rust code.\nThis means they can be harder to understand, and cannot be as easily proved to work as intended.\nProcedural macros can have arbitrary side effects, which can exhaust compiler resources or\nexpose a vulnerability for users of adopted code.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_AmCavSymv3Ev", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 64, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_66FSqzD55VRZ", "parent_needs": ["gui_66FSqzD55VRZ"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_C8RRidiVzhRj": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of why this guideline is important.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_C8RRidiVzhRj", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 189, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_WJlWqgIxmE8P", "parent_needs": ["gui_WJlWqgIxmE8P"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_M9bp23ctkzQ7": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Although the compiler reports both the macro expansion and its invocation site, diagnostics originating within macros can be more difficult to interpret than those from ordinary function or type definitions. Complex or deeply nested macros may obscure intent and hinder static analysis, increasing the risk of misinterpretation or overlooked errors during code review.\n\n\n**Debugging Complexity**\n\n- Errors point to expanded code rather than source locations, making it difficult to trace compile-time errors back to the original macro invocation.\n\n**Optimization**\n\n- Macros may inhibit compiler optimizations that work better with functions.\n- Macros act like ``#[inline(always)]`` functions, which can lead to code bloat.\n- They don't benefit from the compiler's inlining heuristics, missing out on selective inlining where the compiler decides when inlining is beneficial.\n\n**Functions provide**\n\n- Clear type signatures.\n- Predictable behavior.\n- Proper stack traces.\n- Consistent optimization opportunities.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_M9bp23ctkzQ7", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 107, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_2jjWUoF1teOY", "parent_needs": ["gui_2jjWUoF1teOY"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_OhxKm751axKw": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "The mapping between pointers and integers must be consistent with the addressing structure of the\nexecution environment. Issues may arise, for example, on architectures that have a segmented memory model.", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_OhxKm751axKw", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 285, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_iv9yCMHRgpE0", "parent_needs": ["gui_iv9yCMHRgpE0"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_U3AEUPyaUhcb": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of why this guideline is important.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_U3AEUPyaUhcb", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 21, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_h0uG1C9ZjryA", "parent_needs": ["gui_h0uG1C9ZjryA"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_VRNXaxmW1l2s": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Using a path that refers to an entity relatively inside of a macro subjects it to path resolution\nresults which may change depending on where the macro is used. The intended path to refer to an entity\ncan be shadowed when using a macro leading to unexpected behaviors. This could lead to developer confusion\nabout why a macro behaves differently in diffenent locations, or confusion about where entity in a macro\nwill resolve to.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_VRNXaxmW1l2s", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 443, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_SJMrWDYZ0dN4", "parent_needs": ["gui_SJMrWDYZ0dN4"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_WJubG7KuUDLW": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of why this guideline is important.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_WJubG7KuUDLW", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 401, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_FRLaMIMb4t3S", "parent_needs": ["gui_FRLaMIMb4t3S"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_X8uCF5yx7Mpo": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Attribute macros are able to rewrite items entirely or in other unexpected ways which can cause confusion and introduce errors.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_X8uCF5yx7Mpo", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 358, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_13XWp3mb0g2P", "parent_needs": ["gui_13XWp3mb0g2P"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_YqhEiWTj9z6L": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "A pointer created from an arbitrary arithmetic expression may designate an invalid address,\nincluding an address that does not point to a valid object, an address that points to an\nobject of the wrong type, or an address that is not properly aligned. Use of such a pointer\nto access memory will result in undefined behavior.\n\nThe ``as`` operator also does not check that the size of the source operand is the same as\nthe size of a pointer, which may lead to unexpected results if the address computation was\noriginally performed in a differently-sized address space.\n\nWhile ``as`` can notionally be used to create a null pointer, the functions\n:std:`core::ptr::null` and :std:`core::ptr::null_mut` are the more idiomatic way to do this.", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_YqhEiWTj9z6L", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 220, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_PM8Vpf7lZ51U", "parent_needs": ["gui_PM8Vpf7lZ51U"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_dNgSvC0SZ3JJ": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of why this guideline is important.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_dNgSvC0SZ3JJ", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 273, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_uuDOArzyO3Qw", "parent_needs": ["gui_uuDOArzyO3Qw"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_e9iS187skbHH": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Explanation of why this guideline is important.", "created_at": "", "decidability": "", "docname": "coding-guidelines/macros", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_e9iS187skbHH", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 315, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_8hs33nyp0ipX", "parent_needs": ["gui_8hs33nyp0ipX"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Macros", "sections": ["Macros"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_h8LdJQ1MNKu9": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "``var as Type`` casts and :std:`core::mem::transmute`\\s between raw pointer types are generally valid and unchecked by the compiler as long the target pointer type is a thin pointer.\nNot specifying the concrete target pointer type allows the compiler to infer it from the surroundings context which may result in the cast accidentally changing due to surrounding type changes resulting in semantically invalid pointer casts.\n\nRaw pointers have a variety of invariants to manually keep track of.\nSpecifying the concrete types in these scenarios allows the compiler to catch some of these potential issues for the user.", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_h8LdJQ1MNKu9", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 23, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_HDnAZ7EZ4z6G", "parent_needs": ["gui_HDnAZ7EZ4z6G"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_kYiIiW8R2qD1": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "In debug builds, Rust performs runtime checks for integer overflow and will panic if detected.\nHowever, in release builds (with optimizations enabled), unless the flag `overflow-checks`_ is\nturned on, integer operations silently wrap around on overflow, creating potential for silent\nfailures and security vulnerabilities. Note that overflow-checks only brings the default panic\nbehavior from debug into release builds, avoiding potential silent wrap arounds. Nonetheless,\nabrupt program termination is usually not suitable and, therefore, turning this flag on must\nnot be used as a substitute of explicit handling. Furthermore, the behavior in release mode is\nunder consideration by the The Rust Language Design Team and in the future overflow checking\nmay be turned on by default in release builds (it is a `frequently requested change`_).\n\n.. _overflow-checks: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#overflow-checks\n.. _frequently requested change: https://lang-team.rust-lang.org/frequently-requested-changes.html#numeric-overflow-checking-should-be-on-by-default-even-in-release-mode\n\nSafety-critical software requires consistent and predictable behavior across all build\nconfigurations. Explicit handling of potential overflow conditions improves code clarity,\nmaintainability, and reduces the risk of numerical errors in production.", "created_at": "", "decidability": "", "docname": "coding-guidelines/types-and-traits", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_kYiIiW8R2qD1", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 23, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_xztNdXA2oFNB", "parent_needs": ["gui_xztNdXA2oFNB"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Types and Traits", "sections": ["Types and Traits"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}, "rat_v56bjjcveLxQ": {"arch": {}, "avatar": "", "category": "", "closed_at": "", "completion": "", "constraints": [], "constraints_passed": true, "constraints_results": {}, "content": "Although the conversions performed by ``as`` between numeric types are all well-defined, ``as`` coerces\nthe value to fit in the destination type, which may result in unexpected data loss if the value needs to\nbe truncated, rounded, or produce a nearest possible non-equal value.\n\nAlthough some conversions are lossless, others are not symmetrical. Instead of relying on either a defined\nlossy behaviour or risking loss of precision, the code can communicate intent by using ``Into`` or ``From``\nand ``TryInto`` or ``TryFrom`` to signal which conversions are intended to perfectly preserve the original\nvalue, and which are intended to be fallible. The latter cannot be used from const functions, indicating\nthat these should avoid using fallible conversions.\n\nA pointer-to-address cast does not lose value, but will be truncated unless the destination type is large\nenough to hold the address value. The ``usize`` type is guaranteed to be wide enough for this purpose.\n\nA pointer-to-address cast is not symmetrical because the resulting pointer may not point to a valid object,\nmay not point to an object of the right type, or may not be properly aligned.\nIf a conversion in this direction is needed, :std:`std::mem::transmute` will communicate the intent to perform\nan unsafe operation.", "created_at": "", "decidability": "", "docname": "coding-guidelines/expressions", "doctype": ".rst", "duration": "", "external_css": "external_link", "external_url": null, "fls": "", "has_dead_links": false, "has_forbidden_dead_links": false, "id": "rat_v56bjjcveLxQ", "id_prefix": "", "is_external": false, "is_modified": false, "is_need": true, "is_part": false, "jinja_content": false, "layout": "", "lineno": 107, "links": [], "links_back": [], "max_amount": "", "max_content_lines": "", "modifications": 0, "params": "", "parent_need": "gui_ADHABsmK9FXz", "parent_needs": ["gui_ADHABsmK9FXz"], "parent_needs_back": [], "parts": {}, "post_template": null, "pre_template": null, "prefix": "", "query": "", "recommendation": "", "release": "", "scope": "", "section_name": "Expressions", "sections": ["Expressions"], "service": "", "signature": "", "specific": "", "status": "draft", "style": null, "tags": [], "template": null, "title": "", "type": "rationale", "type_name": "Rationale", "updated_at": "", "url": "", "url_postfix": "", "user": ""}}, "needs_amount": 60, "needs_schema": {"$schema": "http://json-schema.org/draft-07/schema#", "properties": {"arch": {"additionalProperties": {"type": "string"}, "default": {}, "description": "Mapping of uml key to uml content.", "field_type": "core", "type": "object"}, "avatar": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "category": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "closed_at": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "completion": {"default": "", "description": "Added for needgantt functionality", "field_type": "extra", "type": "string"}, "constraints": {"default": [], "description": "List of constraint names, which are defined for this need.", "field_type": "core", "items": {"type": "string"}, "type": "array"}, "constraints_error": {"default": "", "description": "An error message set if any constraint failed, and `error_message` field is set in config.", "field_type": "core", "type": "string"}, "constraints_passed": {"default": true, "description": "True if all constraints passed, False if any failed, None if not yet checked.", "field_type": "core", "type": "boolean"}, "constraints_results": {"additionalProperties": {"type": "object"}, "default": {}, "description": "Mapping of constraint name, to check name, to result.", "field_type": "core", "type": "object"}, "content": {"default": "", "description": "Content of the need.", "field_type": "core", "type": "string"}, "created_at": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "decidability": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "docname": {"default": null, "description": "Name of the document where the need is defined (None if external).", "field_type": "core", "type": ["string", "null"]}, "doctype": {"default": ".rst", "description": "Type of the document where the need is defined, e.g. '.rst'.", "field_type": "core", "type": "string"}, "duration": {"default": "", "description": "Added for needgantt functionality", "field_type": "extra", "type": "string"}, "external_css": {"default": "", "description": "CSS class name, added to the external reference.", "field_type": "core", "type": "string"}, "external_url": {"default": null, "description": "URL of the need, if it is an external need.", "field_type": "core", "type": ["string", "null"]}, "fls": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "has_dead_links": {"default": false, "description": "True if any links reference need ids that are not found in the need list.", "field_type": "core", "type": "boolean"}, "has_forbidden_dead_links": {"default": false, "description": "True if any links reference need ids that are not found in the need list, and the link type does not allow dead links.", "field_type": "core", "type": "boolean"}, "id": {"description": "ID of the data.", "field_type": "core", "type": "string"}, "id_prefix": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "is_external": {"default": false, "description": "If true, no node is created and need is referencing external url.", "field_type": "core", "type": "boolean"}, "is_modified": {"default": false, "description": "Whether the need was modified by needextend.", "field_type": "core", "type": "boolean"}, "is_need": {"default": true, "description": "Whether the need is a need.", "field_type": "core", "type": "boolean"}, "is_part": {"default": false, "description": "Whether the need is a part.", "field_type": "core", "type": "boolean"}, "jinja_content": {"default": false, "description": "Whether the content should be pre-processed by jinja.", "field_type": "core", "type": "boolean"}, "layout": {"default": null, "description": "Key of the layout, which is used to render the need.", "field_type": "core", "type": ["string", "null"]}, "lineno": {"default": null, "description": "Line number where the need is defined (None if external).", "field_type": "core", "type": ["integer", "null"]}, "links": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "links_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "max_amount": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "max_content_lines": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "modifications": {"default": 0, "description": "Number of modifications by needextend.", "field_type": "core", "type": "integer"}, "params": {"default": "", "description": "Added by service open-needs", "field_type": "extra", "type": "string"}, "parent_need": {"default": "", "description": "Simply the first parent id.", "field_type": "core", "type": "string"}, "parent_needs": {"default": [], "description": "Link field", "field_type": "links", "items": {"type": "string"}, "type": "array"}, "parent_needs_back": {"default": [], "description": "Backlink field", "field_type": "backlinks", "items": {"type": "string"}, "type": "array"}, "parts": {"additionalProperties": {"type": "object"}, "default": {}, "description": "Mapping of parts, a.k.a. sub-needs, IDs to data that overrides the need's data", "field_type": "core", "type": "object"}, "post_content": {"default": "", "description": "Post-content of the need.", "field_type": "core", "type": "string"}, "post_template": {"default": null, "description": "Post-template of the need.", "field_type": "core", "type": ["string", "null"]}, "pre_content": {"default": "", "description": "Pre-content of the need.", "field_type": "core", "type": "string"}, "pre_template": {"default": null, "description": "Pre-template of the need.", "field_type": "core", "type": ["string", "null"]}, "prefix": {"default": "", "description": "Added by service open-needs", "field_type": "extra", "type": "string"}, "query": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "recommendation": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "release": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "scope": {"default": "", "description": "Added by needs_extra_options config", "field_type": "extra", "type": "string"}, "section_name": {"default": "", "description": "Simply the first section.", "field_type": "core", "type": "string"}, "sections": {"default": [], "description": "Sections of the need.", "field_type": "core", "items": {"type": "string"}, "type": "array"}, "service": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "signature": {"default": "", "description": "Derived from a docutils desc_name node.", "field_type": "core", "type": "string"}, "specific": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "status": {"default": null, "description": "Status of the need.", "field_type": "core", "type": ["string", "null"]}, "style": {"default": null, "description": "Comma-separated list of CSS classes (all appended by `needs_style_`).", "field_type": "core", "type": ["string", "null"]}, "tags": {"default": [], "description": "List of tags.", "field_type": "core", "items": {"type": "string"}, "type": "array"}, "template": {"default": null, "description": "Template of the need.", "field_type": "core", "type": ["string", "null"]}, "title": {"description": "Title of the need.", "field_type": "core", "type": "string"}, "type": {"default": "", "description": "Type of the need.", "field_type": "core", "type": "string"}, "type_name": {"default": "", "description": "Name of the type.", "field_type": "core", "type": "string"}, "updated_at": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "url": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}, "url_postfix": {"default": "", "description": "Added by service open-needs", "field_type": "extra", "type": "string"}, "user": {"default": "", "description": "Added by service github-issues", "field_type": "extra", "type": "string"}}, "type": "object"}}}}